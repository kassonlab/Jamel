import matplotlib.pyplot as pltimport numpy as npfrom itertools import groupbyfrom os import systemimport pathlibimport MDAnalysis as mdaimport pandas as pdfrom MDAnalysis.analysis import rms# must launch script like this to use pymol rmsd pymol -cq script.py# def pymol_rmsd(pdb_file_one, pdb_file_two):#     """This function takes two proteins and uses pymol to calculate the RMSD between the entirety of both proteins.#     This must be run in pymol"""#     from pymol import cmd#     cmd.load(pdb_file_two, object='Protein1')#     cmd.load(pdb_file_one, object='Protein2')#     cmd.remove('organic')#     rmsd = cmd.align('Protein1', 'Protein2')[0]#     cmd.delete('all')#     return rmsddef calculate_rmsd_biopython(pdb_one, pdb_two):    # ref=mda.Universe(r'C:\Users\jamel\PycharmProjects\Jamel\Chimeragenesis\Data\PDB\TEM1.gro').select_atoms('name CA').positions    # part = mda.Universe(r'C:\Users\jamel\PycharmProjects\Jamel\Chimeragenesis\Data\PDB\TEM1_prod.gro').select_atoms('name CA').positions    traj=mda.Universe(r'C:\Users\jamel\PycharmProjects\Jamel\Chimeragenesis\Data\PDB\TEM1_prod.tpr',r'C:\Users\jamel\PycharmProjects\Jamel\Chimeragenesis\Data\PDB\TEM1_prod.xtc')    # # print(rmsd(ref, part, superposition=True))    # traj.trajectory[0]    # atoms = traj.select_atoms("name CA")    # ref_frame=atoms.positions    # rmsds=[]    # for x in range(len(traj.trajectory)):    #     traj.trajectory[x]    #     print(rms.rmsd(ref_frame, atoms.positions, superposition=True))    #     rmsds.append(rms.rmsd(ref_frame, atoms.positions, superposition=True))    # plt.plot(range(len(traj.trajectory)),rmsds)    # plt.show()    # R = rms.RMSD(traj,  # universe to align    #              traj,  # reference universe or atomgroup    #              select='backbone',  # group to superimpose and calculate RMSD    #              ref_frame=1)  # frame index of the reference    # R.run()    # df = pd.DataFrame(R.results.rmsd,    #                   columns=['Frame', 'Time (ps)',    #                            'Backbone'])    # print(df)    # ax = df.plot(x='Frame', y='Backbone',    #              kind='line')    # plt.show()calculate_rmsd_biopython('s','fdsw')def calculate_rmsd_gmx(xtc_file,reference_structure):    system(f'echo 4 4 | gmx_mpi rms -f {xtc_file} -s {reference_structure} -o {pathlib.Path(xtc_file).parent.joinpath("rmsd.xvg")} -tu ns')def graph_rmsd(xvg_files:list[str]):    time, rmsd = np.loadtxt("rmsd.xvg", comments=["@", "#"], unpack=True)    plt.xlabel("time $t$ (ns)")    plt.ylabel(r"C$_\alpha$ RMSD (nm)")    plt.show()def truncate_xtc_file(tpr_file, xtc_file, new_xtc_file, timestep_in_ps):    system(f'echo 1 0 | gmx_mpi trjconv -pbc cluster -f {xtc_file} -s {tpr_file} -dt {timestep_in_ps} -o {new_xtc_file}')def create_pdb_from_trajectory(tpr_file, xtc_file, new_pdb_file, timestamp_in_ps):    system(f'echo 1 1 | gmx_mpi trjconv -f {xtc_file} -center 1 -s {tpr_file} -dump {timestamp_in_ps} -o {new_pdb_file}')    system(f'echo 1 1 | gmx_mpi trjconv -f {new_pdb_file} -pbc mol -s {tpr_file}  -o {new_pdb_file}')def create_rmsf_file(tpr_file, xtc_file, new_xvg_file):    system(f'echo 3 1 | gmx_mpi rmsf -f {xtc_file} -s {tpr_file} -o {new_xvg_file} -res -fit yes')def graph_rmsf(rmsf_files:list[str]):    # from https://www.compchems.com/how-to-compute-the-rmsf-using-gromacs/#the-gmx-rmsf-command    for file in rmsf_files:        # Loading data from the rmsf.xvg file, ignoring lines starting with "@" or "#"        res, rmsf = np.loadtxt(file, comments=["@", "#"], unpack=True)        plt.plot(res,rmsf)    plt.xlabel("Residue Count")    plt.ylabel(r"RMSF (nm)")    plt.show()def averaging_multimer_rmsf(xvg_file, new_xvg_file):    # TODO redo    rmsf_values = [tuple(value.split()) for value in open(xvg_file, 'r').readlines() if value.split()[0].isdigit()]    rmsf_values.sort(key=lambda x: int(x[0]))    sorted_values = [list(group) for key, group in groupby(rmsf_values, lambda x: x[0])]    averaged_values = [sum([float(x[-1]) for x in y]) / len(y) for y in sorted_values]    new_xvg_file = open(new_xvg_file, 'w')    for line in averaged_values:        new_xvg_file.write(str(f'{line} \n'))    new_xvg_file.close()def create_trajectory_movie_pdb(tpr_file, xtc_file, new_pdb_file):    system(f'echo 3 1 | gmx_mpi trjconv -s {tpr_file} -f {xtc_file} -o {new_pdb_file} -fit rot+trans')