import subprocessimport matplotlib.pyplot as pltimport numpy as npfrom itertools import groupbyfrom os import systemimport pathlibimport MDAnalysis as mdaimport pandas as pdfrom MDAnalysis.analysis import rmsdef graph_rmsd_mdanalysis(tpr_centered_xtc_pairs:dict[str,str]):    """Have to center your xtc file with echo 1 0 | gmx_mpi trjconv -f {xtc_file} -center 1 -s {tpr_file}  -o {centered_xtc} -pbc mol    recommended at least python 3.10"""    for tpr,xtc in tpr_centered_xtc_pairs.items():        print(xtc+'123')        traj_universe=mda.Universe(tpr,xtc)        R = rms.RMSD(traj_universe,                     traj_universe,                     select='name CA',                     ref_frame=200)        R.run()        df = pd.DataFrame(R.results.rmsd,                          columns=['Frame', 'Time (ns)',                                   'RMSD'])        #Only grabbing every nano second        # TODO reduce number of assumption Im making about timing to make sure I get the right units        df=df.iloc[::2]        print(df['RMSD'].iloc[160:199].mean())        plt.plot(df['Time (ns)']/1000, df['RMSD'],label=pathlib.Path(tpr).stem)    plt.xlabel('Time (ns)')    plt.ylabel('RMSD')    plt.legend(fontsize=8)    plt.show()def calculate_rmsd_gmx(xtc_file,reference_structure,additional_commands=None):    if additional_commands is None: additional_commands = []    run_gromacs(additional_commands+[f'echo 4 4 | gmx_mpi rms -f {xtc_file} -s {reference_structure} '                   f'-o {pathlib.Path(xtc_file).parent.joinpath("rmsd.xvg")} -tu ns'])def truncate_xtc_file(tpr_file, xtc_file, new_xtc_file, timestep_in_ps,additional_commands=None):    if additional_commands is None: additional_commands = []    run_gromacs(additional_commands+[f'echo 1 0 | gmx_mpi trjconv -pbc cluster -f {xtc_file} '                                                    f'-s {tpr_file} -dt {timestep_in_ps} -o {new_xtc_file}'])def create_pdb_from_trajectory(tpr_file, xtc_file, new_pdb_file, timestamp_in_ns,additional_commands=None):    if additional_commands is None: additional_commands = []    run_gromacs(additional_commands+[f'echo 1 1 | gmx_mpi trjconv -f {xtc_file} -center 1 -s {tpr_file} '                                     f'-dump {timestamp_in_ns} -o {new_pdb_file} -tu ns',f'echo 1 1 | gmx_mpi trjconv '                                                                                         f'-f {new_pdb_file} -pbc mol -s {tpr_file}  -o {new_pdb_file}'])def center_xtc(tpr_file, xtc_file,centered_xtc,additional_commands=None):    if additional_commands is None: additional_commands = []    run_gromacs(additional_commands+[f'echo 1 0 | gmx_mpi trjconv -f {xtc_file} -center 1 '                                                    f'-s {tpr_file}  -o {centered_xtc} -pbc mol'])def create_trajectory_movie_pdb(tpr_file, xtc_file, new_pdb_file,additional_commands=None):    if additional_commands is None: additional_commands = []    run_gromacs(additional_commands+[f'echo 3 1 | gmx_mpi trjconv -s {tpr_file} -f {xtc_file}'                                f' -o {new_pdb_file} -fit rot+trans'])def create_rmsf_file(tpr_file, xtc_file, new_xvg_file,additional_commands=None):    if additional_commands is None: additional_commands=[]    run_gromacs(additional_commands+[f'echo 3 1 | gmx_mpi rmsf -f {xtc_file} -s {tpr_file}'                                                    f' -o {new_xvg_file} -res -fit yes'])def run_gromacs(commands:list):    print(subprocess.run(' && '.join(commands),shell=True,capture_output=True))def averaging_multimer_rmsf(xvg_file, new_xvg_file):    # TODO redo    rmsf_values = [tuple(value.split()) for value in open(xvg_file, 'r').readlines() if value.split()[0].isdigit()]    rmsf_values.sort(key=lambda x: int(x[0]))    sorted_values = [list(group) for key, group in groupby(rmsf_values, lambda x: x[0])]    averaged_values = [sum([float(x[-1]) for x in y]) / len(y) for y in sorted_values]    new_xvg_file = open(new_xvg_file, 'w')    for line in averaged_values:        new_xvg_file.write(str(f'{line} \n'))    new_xvg_file.close()def graph_rmsf(protein_label_rmsf_file_pairs:dict[str,str]):    # from https://www.compchems.com/how-to-compute-the-rmsf-using-gromacs/#the-gmx-rmsf-command    for label,file in protein_label_rmsf_file_pairs.items():        # Loading data from the rmsf.xvg file, ignoring lines starting with "@" or "#"        res, rmsf = np.loadtxt(file, comments=["@", "#"], unpack=True)        # need a way to get labels        plt.plot(res,rmsf,label=label)    plt.legend(fontsize=8)    plt.xlabel("Residue Count")    plt.ylabel(r"RMSF (nm)")    plt.show()